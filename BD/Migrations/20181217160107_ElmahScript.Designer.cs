// <auto-generated />
using System;
using BD.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BD.Migrations
{
    [DbContext(typeof(OrsnaDatabaseContext))]
    [Migration("20181217160107_ElmahScript")]
    partial class ElmahScript
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BD.Models.Adjuntos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime");

                    b.Property<string>("Modulo")
                        .HasMaxLength(50);

                    b.Property<string>("NombreArchivo")
                        .HasMaxLength(500);

                    b.Property<string>("TipoAnexo")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Adjuntos");
                });

            modelBuilder.Entity("BD.Models.Aeropuertos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodIata")
                        .HasMaxLength(500);

                    b.Property<bool?>("Estado");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Fechafin")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdAeropuertosGrupo");

                    b.Property<int?>("IdProvincia");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200);

                    b.Property<string>("NombreCorto")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("IdAeropuertosGrupo");

                    b.HasIndex("IdProvincia");

                    b.ToTable("Aeropuertos");
                });

            modelBuilder.Entity("BD.Models.AeropuertosGrupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AeropuertosGrupo");
                });

            modelBuilder.Entity("BD.Models.Areas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .HasMaxLength(500);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Nombre")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("BD.Models.AreasModulos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("IdArea");

                    b.Property<int>("IdModulo");

                    b.HasKey("Id");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdModulo");

                    b.ToTable("AreasModulos");
                });

            modelBuilder.Entity("BD.Models.AreasModulosPermisos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IdAreaModulo");

                    b.Property<int?>("IdPermiso");

                    b.HasKey("Id");

                    b.HasIndex("IdAreaModulo");

                    b.HasIndex("IdPermiso");

                    b.ToTable("AreasModulosPermisos");
                });

            modelBuilder.Entity("BD.Models.BeneficiarioAdjuntos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IdAdjunto");

                    b.Property<int?>("IdBeneficiario");

                    b.HasKey("Id");

                    b.HasIndex("IdAdjunto");

                    b.HasIndex("IdBeneficiario");

                    b.ToTable("BeneficiarioAdjuntos");
                });

            modelBuilder.Entity("BD.Models.BeneficiarioBancos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BicSwift")
                        .HasMaxLength(100);

                    b.Property<string>("Cbu")
                        .HasColumnName("CBU")
                        .HasMaxLength(100);

                    b.Property<string>("Cuit")
                        .HasMaxLength(50);

                    b.Property<string>("Direccion")
                        .HasMaxLength(500);

                    b.Property<double?>("EsNacional");

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("FechaVigencia")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdBeneficiario");

                    b.Property<string>("NombreBanco")
                        .HasMaxLength(500);

                    b.Property<string>("NroCuenta")
                        .HasMaxLength(500);

                    b.Property<string>("Sucursal")
                        .HasMaxLength(500);

                    b.Property<string>("TipoCuenta")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Titular");

                    b.HasKey("Id");

                    b.HasIndex("IdBeneficiario");

                    b.ToTable("BeneficiarioBancos");
                });

            modelBuilder.Entity("BD.Models.Beneficiarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cuit")
                        .HasMaxLength(50);

                    b.Property<string>("Descripcion");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime");

                    b.Property<string>("NacionalExtranjero")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("RazonSocial");

                    b.Property<string>("Telefono")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Beneficiarios");
                });

            modelBuilder.Entity("BD.Models.Cuentas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion");

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaVigencia")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdAeropuertosGrupo");

                    b.Property<int?>("IdLibranzaTipo");

                    b.Property<string>("Nombre")
                        .HasMaxLength(500);

                    b.Property<string>("NroCuenta")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("IdAeropuertosGrupo");

                    b.HasIndex("IdLibranzaTipo");

                    b.ToTable("Cuentas");
                });

            modelBuilder.Entity("BD.Models.LibranzaAeropuertos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IdAeropuerto");

                    b.Property<int?>("IdLibranza");

                    b.HasKey("Id");

                    b.HasIndex("IdAeropuerto");

                    b.HasIndex("IdLibranza");

                    b.ToTable("LibranzaAeropuertos");
                });

            modelBuilder.Entity("BD.Models.LibranzaBeneficiarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("IdBeneficiario");

                    b.Property<int>("IdBeneficiarioBancos");

                    b.Property<int>("IdLibranzas");

                    b.HasKey("Id");

                    b.HasIndex("IdBeneficiario");

                    b.HasIndex("IdBeneficiarioBancos");

                    b.HasIndex("IdLibranzas");

                    b.ToTable("LibranzaBeneficiarios");
                });

            modelBuilder.Entity("BD.Models.LibranzaCesiones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Beneficiario")
                        .HasMaxLength(100);

                    b.Property<string>("Cuit")
                        .HasMaxLength(50);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IdLibranza");

                    b.Property<string>("NroEscritura")
                        .HasMaxLength(50);

                    b.Property<string>("RegistraCesion")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdLibranza");

                    b.ToTable("LibranzaCesiones");
                });

            modelBuilder.Entity("BD.Models.LibranzaDetalleWorkflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdEstadoAnterior");

                    b.Property<int>("IdLibranza");

                    b.Property<int?>("IdNuevoEstado");

                    b.Property<int>("IdUsuario");

                    b.Property<string>("Observaciones")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IdEstadoAnterior");

                    b.HasIndex("IdLibranza");

                    b.HasIndex("IdNuevoEstado");

                    b.ToTable("LibranzaDetalleWorkflow");
                });

            modelBuilder.Entity("BD.Models.LibranzaEmbargos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IdLibranza");

                    b.Property<decimal?>("Monto");

                    b.Property<string>("NroEmbargo")
                        .HasMaxLength(50);

                    b.Property<string>("Responsable")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Saldo");

                    b.HasKey("Id");

                    b.HasIndex("IdLibranza");

                    b.ToTable("LibranzaEmbargos");
                });

            modelBuilder.Entity("BD.Models.LibranzaFacturas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Ibb");

                    b.Property<int?>("IdLibranza");

                    b.Property<decimal?>("Iva");

                    b.Property<decimal?>("Monto");

                    b.Property<string>("Nro")
                        .HasMaxLength(50);

                    b.Property<string>("Tipo")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdLibranza");

                    b.ToTable("LibranzaFacturas");
                });

            modelBuilder.Entity("BD.Models.LibranzaTipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("LibranzaTipo");
                });

            modelBuilder.Entity("BD.Models.Libranzas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Beneficiario")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdLibranzaEstados");

                    b.Property<int?>("IdLibranzaTipo");

                    b.Property<int?>("IdProvincia");

                    b.Property<int?>("IdProyecto");

                    b.Property<string>("IdentificacionTributaria")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<decimal?>("MontoEmbargo");

                    b.Property<decimal?>("MontoFondoReparo");

                    b.Property<decimal?>("MontoRestante");

                    b.Property<decimal?>("Mora");

                    b.Property<decimal?>("Multa");

                    b.Property<string>("NroEmbargo")
                        .HasMaxLength(200);

                    b.Property<string>("NroEscritura")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("NroLibranza")
                        .HasMaxLength(100);

                    b.Property<bool?>("RegistraCesion");

                    b.Property<string>("ResponsableEmbargo")
                        .HasMaxLength(200);

                    b.Property<decimal?>("SaldoEmbargo");

                    b.Property<bool?>("Sustituido");

                    b.HasKey("Id");

                    b.HasIndex("IdLibranzaEstados");

                    b.HasIndex("IdProyecto");

                    b.ToTable("Libranzas");
                });

            modelBuilder.Entity("BD.Models.LibranzasEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("LibranzasEstado");
                });

            modelBuilder.Entity("BD.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Detalle");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("BD.Models.Modulos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Modulos");
                });

            modelBuilder.Entity("BD.Models.Permisos", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Key")
                        .HasMaxLength(200);

                    b.Property<string>("Nombre")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Permisos");
                });

            modelBuilder.Entity("BD.Models.Provincias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Nombre")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Provincias");
                });

            modelBuilder.Entity("BD.Models.ProyectoAdjuntos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IdAdjunto");

                    b.Property<int?>("IdProyecto");

                    b.HasKey("Id");

                    b.HasIndex("IdAdjunto");

                    b.HasIndex("IdProyecto");

                    b.ToTable("ProyectoAdjuntos");
                });

            modelBuilder.Entity("BD.Models.ProyectoAeropuertos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IdAeropuerto");

                    b.Property<int?>("IdProyecto");

                    b.HasKey("Id");

                    b.HasIndex("IdProyecto");

                    b.ToTable("ProyectoAeropuertos");
                });

            modelBuilder.Entity("BD.Models.ProyectoBeneficiarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IdBeneficiario");

                    b.Property<int>("IdProyecto");

                    b.HasKey("Id");

                    b.HasIndex("IdBeneficiario");

                    b.HasIndex("IdProyecto");

                    b.ToTable("ProyectoBeneficiarios");
                });

            modelBuilder.Entity("BD.Models.ProyectoProvincias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IdProvincia");

                    b.Property<int?>("IdProyecto");

                    b.HasKey("Id");

                    b.HasIndex("IdProvincia");

                    b.HasIndex("IdProyecto");

                    b.ToTable("ProyectoProvincias");
                });

            modelBuilder.Entity("BD.Models.Proyectos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodObra")
                        .HasMaxLength(500);

                    b.Property<string>("Descripcion");

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdArea");

                    b.Property<int?>("IdCuenta");

                    b.Property<string>("IdProyecto")
                        .HasMaxLength(500);

                    b.Property<int?>("IdProyectosEstado");

                    b.Property<decimal?>("MontoTotal");

                    b.Property<string>("Nombre")
                        .HasMaxLength(500);

                    b.Property<string>("NormaLegal")
                        .HasMaxLength(500);

                    b.Property<string>("NroContratacion")
                        .HasMaxLength(50);

                    b.Property<string>("NroObra")
                        .HasMaxLength(50);

                    b.Property<string>("NroPago")
                        .HasMaxLength(50);

                    b.Property<string>("Objeto");

                    b.Property<string>("TipoEstado")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdCuenta");

                    b.HasIndex("IdProyectosEstado");

                    b.ToTable("Proyectos");
                });

            modelBuilder.Entity("BD.Models.ProyectosEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ProyectosEstado");
                });

            modelBuilder.Entity("BD.Models.Usuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(200);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("BD.Models.UsuariosAreas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IdArea");

                    b.Property<int?>("IdUsuario");

                    b.HasKey("Id");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdUsuario");

                    b.ToTable("UsuariosAreas");
                });

            modelBuilder.Entity("BD.Models.Aeropuertos", b =>
                {
                    b.HasOne("BD.Models.AeropuertosGrupo", "IdAeropuertosGrupoNavigation")
                        .WithMany("Aeropuertos")
                        .HasForeignKey("IdAeropuertosGrupo")
                        .HasConstraintName("FK_Aeropuertos_AeropuertosGrupo");

                    b.HasOne("BD.Models.Provincias", "IdProvinciaNavigation")
                        .WithMany("Aeropuertos")
                        .HasForeignKey("IdProvincia")
                        .HasConstraintName("FK_Aeropuertos_Provincias");
                });

            modelBuilder.Entity("BD.Models.AreasModulos", b =>
                {
                    b.HasOne("BD.Models.Areas", "IdAreaNavigation")
                        .WithMany("AreasModulos")
                        .HasForeignKey("IdArea")
                        .HasConstraintName("FK_AreasModulos_Areas");

                    b.HasOne("BD.Models.Modulos", "IdModuloNavigation")
                        .WithMany("AreasModulos")
                        .HasForeignKey("IdModulo")
                        .HasConstraintName("FK_AreasModulos_Modulos");
                });

            modelBuilder.Entity("BD.Models.AreasModulosPermisos", b =>
                {
                    b.HasOne("BD.Models.AreasModulos", "IdAreaModuloNavigation")
                        .WithMany("AreasModulosPermisos")
                        .HasForeignKey("IdAreaModulo")
                        .HasConstraintName("FK_AreasModulosPermisos_AreasModulos");

                    b.HasOne("BD.Models.Permisos", "IdPermisoNavigation")
                        .WithMany("AreasModulosPermisos")
                        .HasForeignKey("IdPermiso")
                        .HasConstraintName("FK_AreasModulosPermisos_Permisos");
                });

            modelBuilder.Entity("BD.Models.BeneficiarioAdjuntos", b =>
                {
                    b.HasOne("BD.Models.Adjuntos", "IdAdjuntoNavigation")
                        .WithMany("BeneficiarioAdjuntos")
                        .HasForeignKey("IdAdjunto")
                        .HasConstraintName("FK_BeneficiarioAdjuntos_Adjuntos");

                    b.HasOne("BD.Models.Beneficiarios", "IdBeneficiarioNavigation")
                        .WithMany("BeneficiarioAdjuntos")
                        .HasForeignKey("IdBeneficiario")
                        .HasConstraintName("FK_BeneficiarioAdjuntos_Beneficiarios");
                });

            modelBuilder.Entity("BD.Models.BeneficiarioBancos", b =>
                {
                    b.HasOne("BD.Models.Beneficiarios", "IdBeneficiarioNavigation")
                        .WithMany("BeneficiarioBancos")
                        .HasForeignKey("IdBeneficiario")
                        .HasConstraintName("FK_BancoProveedores_Proveedores");
                });

            modelBuilder.Entity("BD.Models.Cuentas", b =>
                {
                    b.HasOne("BD.Models.AeropuertosGrupo", "IdAeropuertosGrupoNavigation")
                        .WithMany("Cuentas")
                        .HasForeignKey("IdAeropuertosGrupo")
                        .HasConstraintName("FK_Cuentas_AeropuertosGrupo");

                    b.HasOne("BD.Models.LibranzaTipo", "IdLibranzaTipoNavigation")
                        .WithMany("Cuentas")
                        .HasForeignKey("IdLibranzaTipo")
                        .HasConstraintName("FK_Cuentas_LibranzaTipo");
                });

            modelBuilder.Entity("BD.Models.LibranzaAeropuertos", b =>
                {
                    b.HasOne("BD.Models.Aeropuertos", "IdAeropuertoNavigation")
                        .WithMany("LibranzaAeropuertos")
                        .HasForeignKey("IdAeropuerto")
                        .HasConstraintName("FK_LibranzaAeropuertos_Aeropuertos");

                    b.HasOne("BD.Models.Libranzas", "IdLibranzaNavigation")
                        .WithMany("LibranzaAeropuertos")
                        .HasForeignKey("IdLibranza")
                        .HasConstraintName("FK_LibranzaAeropuertos_Libranzas");
                });

            modelBuilder.Entity("BD.Models.LibranzaBeneficiarios", b =>
                {
                    b.HasOne("BD.Models.Beneficiarios", "IdBeneficiarioNavigation")
                        .WithMany("LibranzaBeneficiarios")
                        .HasForeignKey("IdBeneficiario")
                        .HasConstraintName("FK_LibranzaBeneficiarios_Beneficiarios");

                    b.HasOne("BD.Models.BeneficiarioBancos", "IdBeneficiarioBancosNavigation")
                        .WithMany("LibranzaBeneficiarios")
                        .HasForeignKey("IdBeneficiarioBancos")
                        .HasConstraintName("FK_LibranzaBeneficiarios_BeneficiarioBancos");

                    b.HasOne("BD.Models.Libranzas", "IdLibranzasNavigation")
                        .WithMany("LibranzaBeneficiarios")
                        .HasForeignKey("IdLibranzas")
                        .HasConstraintName("FK_LibranzaBeneficiarios_Libranzas");
                });

            modelBuilder.Entity("BD.Models.LibranzaCesiones", b =>
                {
                    b.HasOne("BD.Models.Libranzas", "IdLibranzaNavigation")
                        .WithMany("LibranzaCesiones")
                        .HasForeignKey("IdLibranza")
                        .HasConstraintName("FK_LibranzaCesiones_Libranzas");
                });

            modelBuilder.Entity("BD.Models.LibranzaDetalleWorkflow", b =>
                {
                    b.HasOne("BD.Models.LibranzasEstado", "IdEstadoAnteriorNavigation")
                        .WithMany("LibranzaDetalleWorkflowIdEstadoAnteriorNavigation")
                        .HasForeignKey("IdEstadoAnterior")
                        .HasConstraintName("FK_LibranzaDetalleWorkflow_LibranzasEstado");

                    b.HasOne("BD.Models.Libranzas", "IdLibranzaNavigation")
                        .WithMany("LibranzaDetalleWorkflow")
                        .HasForeignKey("IdLibranza")
                        .HasConstraintName("FK_LibranzaDetalleWorkflow_Libranzas");

                    b.HasOne("BD.Models.LibranzasEstado", "IdNuevoEstadoNavigation")
                        .WithMany("LibranzaDetalleWorkflowIdNuevoEstadoNavigation")
                        .HasForeignKey("IdNuevoEstado")
                        .HasConstraintName("FK_LibranzaDetalleWorkflow_LibranzasEstado1");
                });

            modelBuilder.Entity("BD.Models.LibranzaEmbargos", b =>
                {
                    b.HasOne("BD.Models.Libranzas", "IdLibranzaNavigation")
                        .WithMany("LibranzaEmbargos")
                        .HasForeignKey("IdLibranza")
                        .HasConstraintName("FK_LibranzaEmbargos_Libranzas");
                });

            modelBuilder.Entity("BD.Models.LibranzaFacturas", b =>
                {
                    b.HasOne("BD.Models.Libranzas", "IdLibranzaNavigation")
                        .WithMany("LibranzaFacturas")
                        .HasForeignKey("IdLibranza")
                        .HasConstraintName("FK_LibranzaFacturas_Libranzas");
                });

            modelBuilder.Entity("BD.Models.Libranzas", b =>
                {
                    b.HasOne("BD.Models.LibranzasEstado", "IdLibranzaEstadosNavigation")
                        .WithMany("Libranzas")
                        .HasForeignKey("IdLibranzaEstados")
                        .HasConstraintName("FK_Libranzas_EstadoLibranzas");

                    b.HasOne("BD.Models.Proyectos", "IdProyectoNavigation")
                        .WithMany("Libranzas")
                        .HasForeignKey("IdProyecto")
                        .HasConstraintName("FK_Libranzas_Proyectos");
                });

            modelBuilder.Entity("BD.Models.ProyectoAdjuntos", b =>
                {
                    b.HasOne("BD.Models.Adjuntos", "IdAdjuntoNavigation")
                        .WithMany("ProyectoAdjuntos")
                        .HasForeignKey("IdAdjunto")
                        .HasConstraintName("FK_ProyectoAdjuntos_Adjuntos");

                    b.HasOne("BD.Models.Proyectos", "IdProyectoNavigation")
                        .WithMany("ProyectoAdjuntos")
                        .HasForeignKey("IdProyecto")
                        .HasConstraintName("FK_ProyectoAdjuntos_Proyectos");
                });

            modelBuilder.Entity("BD.Models.ProyectoAeropuertos", b =>
                {
                    b.HasOne("BD.Models.Proyectos", "IdProyectoNavigation")
                        .WithMany("ProyectoAeropuertos")
                        .HasForeignKey("IdProyecto")
                        .HasConstraintName("FK_ProyectoAeropuertos_Proyectos");
                });

            modelBuilder.Entity("BD.Models.ProyectoBeneficiarios", b =>
                {
                    b.HasOne("BD.Models.Beneficiarios", "IdBeneficiarioNavigation")
                        .WithMany("ProyectoBeneficiarios")
                        .HasForeignKey("IdBeneficiario")
                        .HasConstraintName("FK_ProyectoProveedores_Proveedores");

                    b.HasOne("BD.Models.Proyectos", "IdProyectoNavigation")
                        .WithMany("ProyectoBeneficiarios")
                        .HasForeignKey("IdProyecto")
                        .HasConstraintName("FK_ProyectoProveedores_Proyectos");
                });

            modelBuilder.Entity("BD.Models.ProyectoProvincias", b =>
                {
                    b.HasOne("BD.Models.Provincias", "IdProvinciaNavigation")
                        .WithMany("ProyectoProvincias")
                        .HasForeignKey("IdProvincia")
                        .HasConstraintName("FK_ProyectoProvincias_Provincias");

                    b.HasOne("BD.Models.Proyectos", "IdProyectoNavigation")
                        .WithMany("ProyectoProvincias")
                        .HasForeignKey("IdProyecto")
                        .HasConstraintName("FK_ProyectoProvincias_Proyectos");
                });

            modelBuilder.Entity("BD.Models.Proyectos", b =>
                {
                    b.HasOne("BD.Models.Areas", "IdAreaNavigation")
                        .WithMany("Proyectos")
                        .HasForeignKey("IdArea")
                        .HasConstraintName("FK_Proyectos_Areas");

                    b.HasOne("BD.Models.Cuentas", "IdCuentaNavigation")
                        .WithMany("Proyectos")
                        .HasForeignKey("IdCuenta")
                        .HasConstraintName("FK_Proyectos_Cuentas");

                    b.HasOne("BD.Models.ProyectosEstado", "IdProyectosEstadoNavigation")
                        .WithMany("Proyectos")
                        .HasForeignKey("IdProyectosEstado")
                        .HasConstraintName("FK_Proyectos_ProyectosEstado");
                });

            modelBuilder.Entity("BD.Models.UsuariosAreas", b =>
                {
                    b.HasOne("BD.Models.Areas", "IdAreaNavigation")
                        .WithMany("UsuariosAreas")
                        .HasForeignKey("IdArea")
                        .HasConstraintName("FK_UsuariosAreas_Areas");

                    b.HasOne("BD.Models.Usuarios", "IdUsuarioNavigation")
                        .WithMany("UsuariosAreas")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_UsuariosAreas_Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
